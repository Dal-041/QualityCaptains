package dal.impl.campaign.skills;

import org.lwjgl.util.vector.Vector2f;

import com.fs.starfarer.api.GameState;
import com.fs.starfarer.api.Global;
import com.fs.starfarer.api.characters.AfterShipCreationSkillEffect;
import com.fs.starfarer.api.characters.MutableCharacterStatsAPI;
import com.fs.starfarer.api.characters.ShipSkillEffect;
import com.fs.starfarer.api.characters.SkillSpecAPI;
import com.fs.starfarer.api.combat.BeamAPI;
import com.fs.starfarer.api.combat.CombatEntityAPI;
import com.fs.starfarer.api.combat.DamageAPI;
import com.fs.starfarer.api.combat.DamagingProjectileAPI;
import com.fs.starfarer.api.combat.MissileAPI;
import com.fs.starfarer.api.combat.MutableShipStatsAPI;
import com.fs.starfarer.api.combat.ShipAPI;
import com.fs.starfarer.api.combat.WeaponAPI;
import com.fs.starfarer.api.combat.WeaponAPI.WeaponType;
import com.fs.starfarer.api.combat.ShipAPI.HullSize;
import com.fs.starfarer.api.combat.listeners.AdvanceableListener;
import com.fs.starfarer.api.combat.listeners.DamageDealtModifier;
import com.fs.starfarer.api.impl.campaign.skills.BaseSkillEffectDescription;
import com.fs.starfarer.api.ui.TooltipMakerAPI;
import com.fs.starfarer.api.util.Misc;

public class CaptainsEnergyWeaponsMastery {
	
	public static boolean loadStock = false;
	public static float FLUX_COST_MULT = 0.9f;
	
	public static float MIN_RANGE = 250;
	public static float MAX_RANGE = 1000;
	
	public static float ENERGY_DAMAGE_PERCENT = 30;
	//public static float ENERGY_DAMAGE_MIN_FLUX_LEVEL = 0.4f;
	public static float ENERGY_DAMAGE_MIN_FLUX_LEVEL = 0f;
	
	public static float ENERGY_AMMO_BONUS = 25;
	public static float BEAM_FLUX_MULT = 0.9f;
	public static float BEAM_TURN_BONUS = 25;
	public static float BEAM_DAM_BONUS = 10;
	
	public static float EMP_DAM_REDUCTION = 20;

	public static class Level1 extends BaseSkillEffectDescription implements AfterShipCreationSkillEffect {
		public void applyEffectsAfterShipCreation(ShipAPI ship, String id) {
			ship.addListener(new EWMDamageDealtMod(ship));
		}

		public void unapplyEffectsAfterShipCreation(ShipAPI ship, String id) {
			ship.removeListenerOfClass(EWMDamageDealtMod.class);
		}
		
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			stats.getEnergyWeaponFluxBasedBonusDamageMagnitude().modifyFlat(id, ENERGY_DAMAGE_PERCENT * .01f);
			stats.getEnergyWeaponFluxBasedBonusDamageMinLevel().modifyFlat(id, ENERGY_DAMAGE_MIN_FLUX_LEVEL);
		}
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getEnergyWeaponFluxBasedBonusDamageMagnitude().unmodifyFlat(id);
			stats.getEnergyWeaponFluxBasedBonusDamageMinLevel().unmodifyFlat(id);
		}
		
		public String getEffectDescription(float level) {
			return null;
		}
		
		public void createCustomDescription(MutableCharacterStatsAPI stats, SkillSpecAPI skill, 
											TooltipMakerAPI info, float width) {
			init(stats, skill);
			
			if (ENERGY_DAMAGE_MIN_FLUX_LEVEL > 0) {
				info.addPara("Energy weapons deal up to %s damage at close range as the firing ship's flux level increases above %s",
						0f, hc, hc,
						"+" + (int) ENERGY_DAMAGE_PERCENT + "%",
						(int) Math.round(ENERGY_DAMAGE_MIN_FLUX_LEVEL * 100f) + "%"
				);
			} else {
				info.addPara("Energy weapons deal up to %s damage at close range, based on the firing ship's flux level",
						0f, hc, hc,
						"+" + (int) ENERGY_DAMAGE_PERCENT + "%"
				);
			}
			info.addPara(indent + "Full bonus damage at %s range and below, " +
					   "no bonus damage at %s range and above",
					0f, tc, hc, 
					"" + (int) MIN_RANGE,
					"" + (int) MAX_RANGE
					);
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}
	}
	
	public static class Level2 implements ShipSkillEffect {
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			stats.getEnergyWeaponFluxCostMod().modifyMult(id, FLUX_COST_MULT);
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getEnergyWeaponFluxCostMod().unmodify(id);
		}
		
		public String getEffectDescription(float level) {
			return "-" + Math.round((1f - FLUX_COST_MULT) * 100f) + "% flux generated by energy weapons";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}
	}

	public static Object DAM_BONUS_STATUS_KEY = new Object();
	
	public static class EWMDamageDealtMod implements DamageDealtModifier, AdvanceableListener {
		protected ShipAPI ship;
		public EWMDamageDealtMod(ShipAPI ship) {
			this.ship = ship;
		}
		
		public void advance(float amount) {
			if (Global.getCurrentState() == GameState.COMBAT &&
					Global.getCombatEngine() != null && Global.getCombatEngine().getPlayerShip() == ship) {

				int damageBonus = Math.round((ship.getFluxBasedEnergyWeaponDamageMultiplier() * 100f - 100f));
				if (damageBonus > 0) {
					Global.getCombatEngine().maintainStatusForPlayerShip(DAM_BONUS_STATUS_KEY,
							Global.getSettings().getSpriteName("ui", "icon_energy"),
							"Energy weapon mastery", 
							"+" + damageBonus + "% energy weapon damage", false);
				}
				
			}
		}

		public String modifyDamageDealt(Object param,
								   		CombatEntityAPI target, DamageAPI damage,
								   		Vector2f point, boolean shieldHit) {
			
			if (param instanceof MissileAPI) return null;
			
			Vector2f from = null;
			WeaponAPI weapon = null;
			if (param instanceof DamagingProjectileAPI) {
				from = ((DamagingProjectileAPI)param).getSpawnLocation();
				weapon = ((DamagingProjectileAPI)param).getWeapon();
			} else if (param instanceof BeamAPI) {
				from = ((BeamAPI)param).getFrom();
				weapon = ((BeamAPI)param).getWeapon();
			} else {
				return null;
			}
			
			if (weapon == null || ship == null || weapon.getType() == WeaponType.BALLISTIC) return null;
			
			float mag = ship.getFluxBasedEnergyWeaponDamageMultiplier() - 1f;
			if (mag <= 0) return null;
			
			float dist = Misc.getDistance(from, point);
			float f = 1f;
			if (dist > MAX_RANGE) {
				f = 0f;
			} else if (dist > MIN_RANGE) {
				f = 1f - (dist - MIN_RANGE) / (MAX_RANGE - MIN_RANGE);
			}
			if (f < 0) f = 0;
			if (f > 1) f = 1;
			
//			Vector2f vel = new Vector2f();
//			if (target instanceof ShipAPI) {
//				vel.set(target.getVelocity());
//			}
			
			String id = "ewm_dam_mod";
			damage.getModifier().modifyPercent(id, (mag * f) * 100f);
			return id;
		}
	}
	
	public static class Level3 implements ShipSkillEffect {
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			stats.getBeamWeaponTurnRateBonus().modifyMult(id, 1 + (BEAM_TURN_BONUS/100));
			//stats.getBeamWeaponFluxCostMult().modifyMult(id, BEAM_FLUX_MULT);
			//stats.getBeamWeaponDamageMult().modifyMult(id, BEAM_DAM_BONUS);
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getBeamWeaponTurnRateBonus().unmodify(id);
			//stats.getBeamWeaponFluxCostMult().unmodify(id);
		}
		
		public String getEffectDescription(float level) {
			//return "-" + (int)Math.round((1f - FLUX_COST_MULT) * 100f) + "% flux generated by beam weapons and +" + Math.round(BEAM_TURN_BONUS) + "% turning rate for beam weapons";
			return "+" + Math.round(BEAM_TURN_BONUS) + "% turning rate for beam weapons";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}

	}
	
	public static class Level4 implements ShipSkillEffect {
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			stats.getEnergyAmmoBonus().modifyPercent(id, ENERGY_AMMO_BONUS);
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getEnergyAmmoBonus().unmodify(id);
		}
		
		public String getEffectDescription(float level) {
			return "+" + (int)(ENERGY_AMMO_BONUS) + "% ammo for energy weapons";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}

	}
	
	public static class Level5 implements ShipSkillEffect {
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			stats.getEmpDamageTakenMult().modifyMult(id, 1f - EMP_DAM_REDUCTION / 100f);
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getEmpDamageTakenMult().unmodify(id);
		}
		
		public String getEffectDescription(float level) {
			return "-" + (int)(EMP_DAM_REDUCTION) + "% EMP damage taken";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}

	}
	
	public static class EWMDamageDealtMod2 implements DamageDealtModifier, AdvanceableListener {
		protected ShipAPI ship;
		public EWMDamageDealtMod2(ShipAPI ship) {
			this.ship = ship;
		}
		
		public void advance(float amount) {
			if (Global.getCurrentState() == GameState.COMBAT &&
					Global.getCombatEngine() != null && Global.getCombatEngine().getPlayerShip() == ship) {

				int damageBonus = (int) Math.round((ship.getFluxBasedEnergyWeaponDamageMultiplier() * 100f - 100f));
				if (damageBonus > 0) {
					Global.getCombatEngine().maintainStatusForPlayerShip(DAM_BONUS_STATUS_KEY,
							Global.getSettings().getSpriteName("ui", "icon_energy"),
							"Energy weapon mastery", 
							"+" + damageBonus + "% energy weapon damage", false);
				}
				
			}
		}

		public String modifyDamageDealt(Object param,
								   		CombatEntityAPI target, DamageAPI damage,
								   		Vector2f point, boolean shieldHit) {
			
			if (param instanceof MissileAPI) return null;
			
			Vector2f from = null;
			WeaponAPI weapon = null;
			if (param instanceof DamagingProjectileAPI) {
				from = ((DamagingProjectileAPI)param).getSpawnLocation();
				weapon = ((DamagingProjectileAPI)param).getWeapon();
			} else if (param instanceof BeamAPI) {
				from = ((BeamAPI)param).getFrom();
				weapon = ((BeamAPI)param).getWeapon();
			} else {
				return null;
			}
			
			if (weapon == null || ship == null) return null;
			
			float mag = ship.getFluxBasedEnergyWeaponDamageMultiplier() - 1f;
			if (mag <= 0) return null;
			
					
//			Vector2f vel = new Vector2f();
//			if (target instanceof ShipAPI) {
//				vel.set(target.getVelocity());
//			}
			
			String id = "ewm_dam_mod";
			damage.getModifier().modifyPercent(id, mag * 100f);
			return id;
		}
	}	
	
}











