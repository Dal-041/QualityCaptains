package dal.impl.campaign.skills;

import com.fs.starfarer.api.characters.MutableCharacterStatsAPI;
import com.fs.starfarer.api.characters.ShipSkillEffect;
import com.fs.starfarer.api.combat.MutableShipStatsAPI;
import com.fs.starfarer.api.combat.ShipAPI.HullSize;
import com.fs.starfarer.api.impl.campaign.skills.BaseSkillEffectDescription;
import com.fs.starfarer.api.util.Misc;

public class CaptainsOrdnanceExpertise {
	
	public static boolean USE_DISCOUNT_EFFECT = true;
	public static float MAX_CR_BONUS = 15;
	public static float FLUX_PER_OP = 1.5f;
	public static float CAP_PER_OP = 20;
	public static float FLUX_GEN_REDUCTION_PER_OP_CAPITAL = 0.05f;
	public static float FLUX_GEN_REDUCTION_PER_OP_CRSR = 0.075f;
	public static float FLUX_GEN_REDUCTION_PER_OP_DEST = 0.10f;
	public static float FLUX_GEN_REDUCTION_PER_OP_FRIG = 0.2f;
	public static float FLUX_GEN_REDUCTION_PER_OP = 0.05f;
	public static float FLUX_GEN_REDUCTION_CAP = 15f;
	
	public static class Level1 implements ShipSkillEffect {
		
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			if (stats.getVariant() != null && !USE_DISCOUNT_EFFECT) {
				MutableCharacterStatsAPI cStats = BaseSkillEffectDescription.getCommanderStats(stats);
				float flux = FLUX_PER_OP * stats.getVariant().computeWeaponOPCost(cStats);
				stats.getFluxDissipation().modifyFlat(id, flux);
			} else if (stats.getVariant() != null) {
				MutableCharacterStatsAPI cStats = BaseSkillEffectDescription.getCommanderStats(stats);
				float fluxMult = 0; 
				if (stats.getVariant().getHullSize() != null) {
					switch (stats.getVariant().getHullSize()) {
						case FRIGATE:
							fluxMult = FLUX_GEN_REDUCTION_PER_OP_FRIG * stats.getVariant().computeWeaponOPCost(cStats);
							break;
						case DESTROYER:
							fluxMult = FLUX_GEN_REDUCTION_PER_OP_DEST * stats.getVariant().computeWeaponOPCost(cStats);
							break;
						case CRUISER:
							fluxMult = FLUX_GEN_REDUCTION_PER_OP_CRSR * stats.getVariant().computeWeaponOPCost(cStats);
							break;
						case CAPITAL_SHIP:
							fluxMult = FLUX_GEN_REDUCTION_PER_OP_CAPITAL * stats.getVariant().computeWeaponOPCost(cStats);
							break;
						default:
							fluxMult = FLUX_GEN_REDUCTION_PER_OP * stats.getVariant().computeWeaponOPCost(cStats);
						break;
					}
				} else {
					//throw new RuntimeException("QC_ERROR: Hullsize was null for " + stats.getVariant().getVariantFilePath() + "!"); 
				}
				if (fluxMult > FLUX_GEN_REDUCTION_CAP) fluxMult = FLUX_GEN_REDUCTION_CAP;
				stats.getBallisticWeaponFluxCostMod().modifyMult(id, 1 - (fluxMult / 100f));
				stats.getEnergyWeaponFluxCostMod().modifyMult(id, 1 - (fluxMult / 100f));
				stats.getBeamWeaponFluxCostMult().modifyMult(id, 1 - (fluxMult / 100f));
				stats.getMissileWeaponFluxCostMod().modifyMult(id, 1 - (fluxMult / 100f));
			}
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			if (!USE_DISCOUNT_EFFECT) {
				stats.getFluxDissipation().unmodifyFlat(id);
			} else {
				stats.getBallisticWeaponFluxCostMod().unmodifyMult(id);
				stats.getEnergyWeaponFluxCostMod().unmodifyMult(id);
				stats.getBeamWeaponFluxCostMult().unmodifyMult(id);
				stats.getMissileWeaponFluxCostMod().unmodifyMult(id);
			}
		}
		
		public String getEffectDescription(float level) {
			if (!USE_DISCOUNT_EFFECT) {
				return "+" + Misc.getRoundedValueMaxOneAfterDecimal(FLUX_PER_OP) + " flux dissipation per ordnance point spent on weapons";
			}
			return "-" + FLUX_GEN_REDUCTION_PER_OP_FRIG + " / " + FLUX_GEN_REDUCTION_PER_OP_DEST + " / "  + FLUX_GEN_REDUCTION_PER_OP_CRSR + " / "  + FLUX_GEN_REDUCTION_PER_OP_CAPITAL + "% flux generated by weapons per ordnance point spent on weapons,\n depending on hullsize, up to -" + Math.round(FLUX_GEN_REDUCTION_CAP) + "%";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}

		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}
	}
	
	public static class Level2 implements ShipSkillEffect {
		
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			if (stats.getVariant() != null) {
				MutableCharacterStatsAPI cStats = BaseSkillEffectDescription.getCommanderStats(stats);
				float flux = CAP_PER_OP * stats.getVariant().computeWeaponOPCost(cStats);
				stats.getFluxCapacity().modifyFlat(id, flux);
			}
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getFluxCapacity().unmodifyFlat(id);
		}
		
		public String getEffectDescription(float level) {
			return "+" + (int)(CAP_PER_OP) + " flux capacity per ordnance point spent on weapons";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.PILOTED_SHIP;
		}
	}	
}











