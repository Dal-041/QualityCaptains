package dal.impl.campaign.skills;

import java.awt.Color;

import com.fs.starfarer.api.characters.DescriptionSkillEffect;
import com.fs.starfarer.api.characters.MutableCharacterStatsAPI;
import com.fs.starfarer.api.characters.ShipSkillEffect;
import com.fs.starfarer.api.characters.SkillSpecAPI;
import com.fs.starfarer.api.combat.MutableShipStatsAPI;
import com.fs.starfarer.api.combat.ShipAPI;
import com.fs.starfarer.api.combat.ShipAPI.HullSize;
import com.fs.starfarer.api.fleet.FleetMemberAPI;
import com.fs.starfarer.api.impl.campaign.ids.Stats;
import com.fs.starfarer.api.impl.campaign.skills.BaseSkillEffectDescription;
import com.fs.starfarer.api.ui.TooltipMakerAPI;

public class CaptainsPhaseCorps {
	
	public static boolean USE_PPT_BONUS = false;
	public static boolean USE_SPEED_BONUS = true;
	public static float FLUX_UPKEEP_REDUCTION = 20f;
	public static float PEAK_TIME_BONUS = 90f;
	public static float PHASE_COOLDOWN_REDUCTION = 20f;
	public static float PHASE_FIELD_BONUS_PERCENT = 50f;
	public static float PHASE_SPEED_BONUS = 50f;
	public static float PHASE_SHIP_SENSOR_BONUS_PERCENT = 100f;
	

	public static boolean isPhaseAndOfficer(MutableShipStatsAPI stats) {
		if (stats.getEntity() instanceof ShipAPI) {
			ShipAPI ship = (ShipAPI) stats.getEntity();
			if (!ship.getHullSpec().isPhase()) return false;
			return !ship.getCaptain().isDefault();
		} else {
			FleetMemberAPI member = stats.getFleetMember();
			if (member == null) return false;
			if (!member.isPhaseShip()) return false;
			return !member.getCaptain().isDefault();
		}
	}
	public static boolean isPhase(MutableShipStatsAPI stats) {
		FleetMemberAPI member = stats.getFleetMember();
		if (member == null) return false;
		return member.isPhaseShip();
	}
	
	public static class Level0 implements DescriptionSkillEffect {
		public String getString() {
			return "\n*The sensor strength of phase ships also contributes to the fleetwide stealth bonus granted by the Phase Field hullmod.";
		}
		public Color[] getHighlightColors() {
			return null;
		}
		public String[] getHighlights() {
			return null;
		}
		public Color getTextColor() {
			return null;
		}
	}
	
	public static class Level1 implements ShipSkillEffect {

		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			if (isPhase(stats)) {
				stats.getPhaseCloakUpkeepCostBonus().modifyMult(id, 1f - FLUX_UPKEEP_REDUCTION / 100f);
			}
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getPhaseCloakUpkeepCostBonus().unmodifyMult(id);
		}
		
		public String getEffectDescription(float level) {
			return "-" + Math.round(FLUX_UPKEEP_REDUCTION) + "% flux generated by active phase cloak";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}

		public ScopeDescription getScopeDescription() {
			return ScopeDescription.ALL_SHIPS;
		}
	}
	
	public static class Level2 implements ShipSkillEffect {
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			if (isPhase(stats)) {
				stats.getPhaseCloakCooldownBonus().modifyMult(id, 1f - PHASE_COOLDOWN_REDUCTION / 100f);
			}
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			stats.getPhaseCloakCooldownBonus().unmodify(id);
		}
		
		public String getEffectDescription(float level) {
			return "-" + Math.round(PHASE_COOLDOWN_REDUCTION) + "% phase cloak cooldown";
		}
		
		public String getEffectPerLevelDescription() {
			return null;
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.ALL_SHIPS;
		}
	}
	
	public static class Level3 extends BaseSkillEffectDescription implements ShipSkillEffect {
		
		public void apply(MutableShipStatsAPI stats, HullSize hullSize, String id, float level) {
			//stats.getPhaseCloakUpkeepCostBonus().modifyMult(id, 1f - PHASE_CLOAK_COOLDOWN_REDUCTION / 100f);
			if (isPhase(stats) && !isCivilian(stats)) {
				if (USE_PPT_BONUS) {
					stats.getPeakCRDuration().modifyFlat(id, PEAK_TIME_BONUS);
				}
				
				stats.getSensorStrength().modifyPercent(id, PHASE_SHIP_SENSOR_BONUS_PERCENT);
				
				if (USE_SPEED_BONUS) {
					stats.getDynamic().getMod(Stats.PHASE_CLOAK_SPEED_MOD).modifyFlat(id, PHASE_SPEED_BONUS);
					stats.getDynamic().getMod(Stats.PHASE_CLOAK_ACCEL_MOD).modifyFlat(id, PHASE_SPEED_BONUS);
				}
			}
		}
		
		public void unapply(MutableShipStatsAPI stats, HullSize hullSize, String id) {
			if (USE_PPT_BONUS) stats.getPeakCRDuration().unmodifyFlat(id);
			stats.getSensorStrength().unmodifyPercent(id);
			if (USE_SPEED_BONUS) {
				stats.getDynamic().getMod(Stats.PHASE_CLOAK_SPEED_MOD).unmodifyFlat(id);
				stats.getDynamic().getMod(Stats.PHASE_CLOAK_ACCEL_MOD).unmodifyFlat(id);
			}
		}
		
		public String getEffectDescription(float level) {
			return null;
		}
			
		public void createCustomDescription(MutableCharacterStatsAPI stats, SkillSpecAPI skill, 
											TooltipMakerAPI info, float width) {
			
			init(stats, skill);

			info.addSpacer(5f);
			
			if (USE_PPT_BONUS) {
				info.addPara("+"+ (int) PEAK_TIME_BONUS + " seconds peak operating time for combat phase ships", hc, 0f);
			}
			if (USE_SPEED_BONUS) {
				info.addPara("+"+ (int) PHASE_SPEED_BONUS + "% top speed and acceleration while phase cloak active", hc, 0f);
			}
			info.addPara("+"+(int)PHASE_SHIP_SENSOR_BONUS_PERCENT+"% to sensor strength of combat phase ships*", hc, 0f);

			//addPhaseOPThresholdInfo(info, data, stats);
			
			/*
			info.addSpacer(5f);
			if (USE_PPT_BONUS) {
				info.addPara("+%s seconds peak operating time for combat phase ships", 0f, hc, "" + (int) PEAK_TIME_BONUS);
			}
			if (USE_SPEED_BONUS) {
				info.addPara("+%s top speed and acceleration while phase cloak active", 0f, hc, "" + (int) PHASE_SPEED_BONUS + "%");
			}
			info.addPara("+%s to sensor strength of combat phase ships*", 0f, hc,
					"" + (int) PHASE_SHIP_SENSOR_BONUS_PERCENT + "%");
			*/

		}
		
		
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.ALL_SHIPS;
		}
	}
		
	/*
	public static class Level5 extends BaseSkillEffectDescription implements FleetStatsSkillEffect {
		public void apply(MutableFleetStatsAPI stats, String id, float level) {
//			float mod = PhaseField.getAdjustedPhaseFieldModifier(Global.getSector().getPlayerFleet(), null, 0);
//			int value = (int) Math.round(mod * PHASE_FIELD_BONUS_PERCENT / 100f);
//			if (value < 0) {
//				stats.getDetectedRangeMod().modifyFlat(id, value, "Phase corps");
//			}
			StatMod phaseFieldMod = stats.getDetectedRangeMod().getFlatBonus(PhaseField.MOD_KEY);
			if (phaseFieldMod != null) {
				int value = (int) Math.round(phaseFieldMod.value * PHASE_FIELD_BONUS_PERCENT / 100f);
				if (value < 0) {
					stats.getDetectedRangeMod().modifyFlat(id, value, "Phase corps");
				}
			}
		}

		public void unapply(MutableFleetStatsAPI stats, String id) {
			stats.getDetectedRangeMod().unmodifyFlat(id);
		}
		
		public void createCustomDescription(MutableCharacterStatsAPI stats, SkillSpecAPI skill, 
											TooltipMakerAPI info, float width) {
			init(stats, skill);
			float opad = 10f;
			Color c = Misc.getBasePlayerColor();
			info.addPara("Affects: %s", opad + 5f, Misc.getGrayColor(), c, "fleet");
			info.addSpacer(opad);
			info.addPara("+%s to fleetwide sensor profile reduction from phase field", 0f, hc, hc,
					"" + (int) PHASE_FIELD_BONUS_PERCENT + "%");
		}
		
		public ScopeDescription getScopeDescription() {
			return ScopeDescription.FLEET;
		}
	}
	*/
}
